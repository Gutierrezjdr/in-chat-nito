{"version":3,"sources":["components/HomePage.js","components/ClassList.js","components/Logout.js","components/MessageForm.jsx","components/MessageList.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","react_default","a","createElement","className","onSubmit","getUsername","id","type","name","placeholder","createUsername","ClassList","courses","map","course","Button_default","onClick","switchToChat","handleRoomClick","courseID","key","courseName","Logout","logOut","MessageForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","e","preventDefault","message","from","onMessageSubmit","setState","target","value","_this2","handleSubmit","onChange","handleChange","Component","Message","last","MessageList","Socket","emit","node","ReactDOM","findDOMNode","shouldScrollBottom","scrollTop","offsetHeight","scrollHeight","messages","i","MessageList_Message","React","socket","io","App","classID","room","console","log","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","existing_username","wrap","_context","prev","next","elements","fetch","concat","method","header","then","res","status","document","getElementById","innerHTML","handleUserSubmit","json","test","stop","_x","apply","arguments","_ref2","_callee2","u","new_username","_context2","_x2","on","users","activeChat","undefined","w","onDisconnectStatus","messageReceive","_ref3","chatUpdate","toConsumableArray","components_HomePage","_this3","components_Logout","components_MessageList","length","components_MessageForm","handleMessageSubmit","components_ClassList","renderHomePage","renderCoursePage","renderChat","Boolean","window","location","hostname","match","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cea80753.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nconst HomePage = props => (\n\t<div className=\"container\">\n\t\t<h3 className=\"title\">IN CHAT NITO</h3>\n\t\t<div className=\"row\">\n\n\t\t\t<div className=\"col-xs-5 image-container\"></div>\n\n\t\t\t<div className=\"col-xs-7 form-container\">\n\t\t\t\t<form onSubmit={props.getUsername}>\n\t\t\t\t\t<h4>Login</h4>\n\t\t\t\t\t<input id='login_input' type=\"text\" name=\"name\" className=\"login-button\" placeholder=\"ENTER USERNAME\"/>\n\t\t\t\t\t<button type=\"submit\" id=\"getData\" className='btn'>Submit</button>\n\t\t\t\t\t<p id=\"login_error\"></p>\n\t\t\t\t</form>\n\t\t\t\t<form className= \"SignUponSubmit\" onSubmit = {props.createUsername}>\n\t\t\t\t\t<h4>Sign Up</h4>\n\t\t\t\t\t<input id='login_input' type=\"text\" name=\"new_username\" className=\"login-button\" placeholder=\"ENTER NEW USERNAME\"/>\n\t\t\t\t\t<button id=\"getData\" className='SignUpbtn'>Submit</button>\n\t\t\t\t\t<p id=\"signup_error\"></p>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t</div>\n\n\t</div>\n\t);\n\nexport default HomePage\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\n\n\nconst ClassList1 = props => (\n\t<div>\n\t\t\t<h2>Here are the courses you are enrolled in: </h2>\n\n\t<div className = \"courses_sec\">\n\t<center><Button className = \"courses_btn\" onClick={() => { props.switchToChat() }}>\nWeb Development\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nComputer Architecture\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nSpanish\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nGame Design\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\t\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nMusic History\t</Button> </center>\n\t</div>\n  </div>\n);\n\n\n// displays users from \"/users\"\n// function ClassList(props) { \n// \treturn (\n// \t\t <div>{props.jinfo.map(user=>{\n// \t\t\t return <h2 key={user.id}>{user.username}</h2>\n// \t\t })}\n// \t\t\t {/* <h1>hello</h1> */}\n// \t\t </div>\n// \t);\n//   }\n\n// used for inline styling below -- specifically for jsx\nlet styles = {\n    margin: '10px',\n  };\n\n//displays courses from \"/courses\"\nfunction ClassList(props) { \n\treturn (\n\t\t <div  >\n\t\t\t<h2>Here are the courses you are enrolled in: </h2>\n\t\t\t<div className = \"courses_sec\">\n\t\t\t\t{props.courses.map(course=>{\n\t\t\t\t\treturn <Button className=\"courses_btn\" onClick={() => { props.switchToChat(); props.handleRoomClick(course.courseID) }} key={course.courseID} >{course.courseName}</Button>\n\t\t\t\t})}\n\t\t\t</div>\n\t\t </div>\n\t);\n  }\n\n\nexport default ClassList;\n","import React from \"react\";\n\nconst Logout = props => (\n\t<form onSubmit = {props.logOut}>\t\t\n\t\t<button id=\"log-btn\">Logout</button>\n\t</form>\n\t\n\n);\n\nexport default Logout","import React, { Component } from 'react';\n\nimport styles from '../App.css';\n\nclass MessageForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: ''\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const message = {\n            from: this.props.name,\n            text: this.state.text\n        };\n        this.props.onMessageSubmit(message);\n        this.setState({\n            text: ''\n        });\n    }\n\n    handleChange(e) {\n        this.setState({\n            text: e.target.value\n        });\n    }\n\n    render() {\n        return (\n            <form className = \"MessageForm\"\n                onSubmit = { e => this.handleSubmit(e)}\n            >\n                <input \n                    className = \"MessageInput\"\n                    onChange = { e => this.handleChange(e)}\n                    value = { this.state.text}\n                    placeholder = 'Message'\n                />\n            </form>\n        );\n    }    \n}\n\nexport default MessageForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styles from '../App.css';\nimport { Socket } from 'dgram';\n\nconst Message = props => (\n    <div className={\"Message\" + (props.from === props.name ? ' ' + \"MessageRight\" : '')}>\n        {/* group messages from which user they are */}\n        <strong>{(props.last === props.from) ? '' :(props.from === props.name ? 'You' : props.from)}</strong>\n        <span className = {\"Cloud\" + (props.from === props.name ? ' ' + \"CloudRight\" : '')}>{props.text}</span>\n        {/* <span className = {props.from === props.name ? \"Cloud\" : \"CloudRight\" }>{props.text}</span> */}\n    </div>\n);\n\nclass MessageList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    //scrolls messages list always to the bottom of it\n    //based on http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html\n    // componentDidUpdate() {\n    //     const node = ReactDOM.findDOMNode(this);\n    //     node.scrollTop = node.scrollHeight;\n    // }\n\n    //scroll only if user was already at the bottom of messages list\n    loadMessages(){\n        Socket.emit('load messages', )\n    }\n    componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this);\n        this.shouldScrollBottom = node.scrollTop + node.offsetHeight === node.scrollHeight;\n    }\n\n    componentDidUpdate() {\n        if(this.shouldScrollBottom) {\n            const node = ReactDOM.findDOMNode(this);\n            node.scrollTop = node.scrollHeight;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"MessageList\">\n                {\n                    this.props.messages.map( (messages, i) => {\n                        return (\n                            <Message \n                                key = {i}\n                                from = {messages.from}        \n                                text = {messages.text}\n                                name = {this.props.name}\n                                last = {(i > 0) ? this.props.messages[i-1].from : ''}\n                            />    \n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default MessageList;","import React from 'react';\nimport './App.css';\nimport './SignUp.css'\nimport HomePage from \"./components/HomePage\"\nimport ClassList from \"./components/ClassList\"\nimport Logout from \"./components/Logout\"\nimport MessageForm from \"./components/MessageForm.jsx\";\nimport MessageList from \"./components/MessageList.jsx\";\nimport UsersList from \"./components/UsersList.jsx\";\n// import React, { Component } from 'react';\n\n\nimport io from \"socket.io-client\";\nconst socket = io('/')\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: undefined,\n      activeChat: false,\n      courseID:0,\n      users: [],\n      courses: [],\n      messages: [],\n      text: '',\n      room: ''\n\n    }; \n    this.onDisconnectStatus = '';\n  }\n\n  componentDidMount(){\n   \n    \n    socket.on('message', message => this.messageReceive(message));\n    socket.on('update', ({users}) => this.chatUpdate(users));\n  }\n\n  messageReceive(message) {\n    const messages = [...this.state.messages, message];\n    this.setState({messages})\n  }\n\n  chatUpdate(users) {\n    this.setState({users});\n  }\n\n  handleUserSubmit(name) {\n    if(name) {\n        this.setState({name});\n        socket.emit('join', name);\n    }\n}\n\n  handleMessageSubmit(message) {\n    if (message.text) {\n        const messages = [...this.state.messages, message];\n        this.setState({messages});\n        socket.emit('message', message);\n    }\n  }\n\n  handleRoomClick = (classID) => {\n    // join a room\n    const room = classID;\n    socket.emit('join room', room);\n  \n    this.setState({ room });\n    console.log(\"room \" + room + \" was clicked\");\n\n   // console.log(\"Loading messages....\");\n  \n  \n    \n}\n\n\n\n  // --- LOGIN FUNCTION ---\n  getUsername = async(event) => {\n    //this prevents the page from reloading when the button is clicked\n    event.preventDefault();\n\n    // gets userinput from login field and prints name in console\n    const existing_username = event.target.elements.name.value;\n    console.log(existing_username);\n\n    fetch(`/login/${existing_username}`, {\n      method:'GET',\n      header: existing_username\n    })\n    .then(res => {\n      console.log(res.status)\n      // if user does not exists, print error message on screen\n      if(res.status === 404){\n        //this.setState({ name : existing_username })\n          let error = \"Error: no user found\";\n          // gets element with id 'login_error\" and prints the error on the screen\n          document.getElementById('login_error').innerHTML = error;\n        };\n\n      // if user exists, store username in state + fetch courses -> redirects to courses page\n      if(res.status === 200){\n        // setting the state causes the page to be rerendered\n        this.setState({ name : existing_username })\n        this.handleUserSubmit(existing_username);\n\n        // fetch list of courses from backend route\n        fetch('/courses')\n        .then(res => res.json())\n        .then(courses => this.setState({ courses }))\n        .then(test => console.log(this.state.courses))\n      }\n    })\n  }\n\n\n// --- SIGN UP FUNCTION ---\ncreateUsername = async(u) => {\n  //this prevents the page from reloading when the button is clicked\n  u.preventDefault();\n\n  // gets userinput from signup field and prints name in console\n  const new_username = u.target.elements.new_username.value;\n  console.log(new_username);\n\n  // checks if the new username already exists\n  fetch(`/signup/${new_username}`, {\n    method:'GET',\n    header: new_username\n  })\n  .then(res=>{\n    console.log(res.status)\n\n    if(res.status === 404){\n      let message = \"Error: Username already exists.\";\n      // if user exists -> print error message\n        // gets element with id 'signup_error\" and prints the error message on the screen\n        document.getElementById('signup_error').innerHTML = message;\n\n    }\n\n    if(res.status === 200){\n      let message = \"User has been created\";\n\n      // fetch list of courses from backend route\n      fetch('/courses')\n      .then(res => res.json())\n      .then(courses => this.setState({ courses }))\n      .then(test => console.log(this.state.courses))\n\n         // creates username, store new_username in state + fetch courses -> redirects to courses page\n        this.setState({ name : new_username })\n        this.handleUserSubmit(new_username);\n\n\n      }\n    })\n\n  }\n\nlogOut = (e) => {\n  socket.on('disconnect', () => {\n    this.setState({\n        users: [],\n        activeChat : false,\n        courses : [],\n        messages: [],\n        text: '',\n        name: undefined\n    });\n  })\n}\n\nswitchToChat = (w) => {\n  //w.preventDefault();\n  //console.log(JSON.stringify(course));\n  this.setState({\n    activeChat : true,\n    \n  })\n \n  //socket.emit('join',course.courseID , this.state.name);\n //this.handleUserSubmit(this.set.name);\n  //console.log(this.state.name);\n  \n // console.log(courseID);\n}\n\n// -- --- RENDERING ---\n\n// let result = condition ? value1 : value2;\n// render() {\n//   return this.state.name === undefined ? this.renderHomePage() : this.renderChat();\n// }\n\n\nrenderHomePage(){\n  return(\n    <div className=\"wrapper\">\n      <HomePage getUsername={this.getUsername} createUsername={this.createUsername}/>\n    </div>\n  )\n}\n\nrenderChat() {\n  return (\n    <div>\n      <h4>Chat Page </h4>\n      <h2>Room {this.state.room}</h2>\n    <Logout logOut={this.logOut}/>\n      {/* <UsersList\n        users={this.state.users}\n        name = {this.state.name}\n\n        /> */}\n\n    <div className = \"MessageWrapper\">\n      <MessageList\n\n          messages={this.state.messages}\n          name = {this.state.name}\n          last = {this.state.messages[this.state.messages.length-2]}\n          \n      />\n      <MessageForm\n\n          onMessageSubmit={message => this.handleMessageSubmit(message)}\n          name={this.state.name}\n      />\n    </div>\n    </div>\n  );\n}\n\nrenderCoursePage() {\n  \n  return (\n    <div>\n    <Logout logOut={this.logOut}/>\n    <ClassList switchToChat={this.switchToChat} courses={this.state.courses} handleRoomClick={this.handleRoomClick} />\n    </div>\n  );\n}\n\nrender(){\n  if(this.state.name === undefined && this.state.activeChat === false)\n    return this.renderHomePage()\n  else if(this.state.name !== undefined && this.state.activeChat === false)\n    return this.renderCoursePage()\n  else\n    return this.renderChat()\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'; \nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport ClassList from './components/ClassList';\nimport HomePage from './components/HomePage';\nimport CourseCreate from './components/CourseCreate';\nimport JoinCourse from './components/JoinCourse';\n//import Chat from '../../public/Chat';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}